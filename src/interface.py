"""
Sistema Banc√°rio - Interface de Usu√°rio
Implementa√ß√£o da interface de linha de comando para intera√ß√£o com o sistema.
"""

import os
import sys
from typing import Optional
from .banco import SistemaBancario
from .conta import ContaBancaria


class InterfaceBancaria:
    """
    Interface de usu√°rio para o sistema banc√°rio.
    
    Attributes:
        sistema (SistemaBancario): Inst√¢ncia do sistema banc√°rio
        conta_atual (ContaBancaria): Conta atualmente logada
    """
    
    def __init__(self):
        """Inicializa a interface banc√°ria."""
        self.sistema = SistemaBancario("üè¶ Banco Digital Python")
        self.conta_atual: Optional[ContaBancaria] = None
    
    def limpar_tela(self):
        """Limpa a tela do terminal."""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def pausar(self):
        """Pausa a execu√ß√£o at√© o usu√°rio pressionar Enter."""
        input("\nüì± Pressione Enter para continuar...")
    
    def exibir_cabecalho(self, titulo: str):
        """
        Exibe cabe√ßalho formatado.
        
        Args:
            titulo (str): T√≠tulo a ser exibido
        """
        self.limpar_tela()
        print("=" * 60)
        print(f"üè¶ {self.sistema.nome_banco}")
        print("=" * 60)
        print(f"üìã {titulo}")
        print("-" * 60)
    
    def obter_numero(self, mensagem: str, min_valor: float = 0) -> float:
        """
        Obt√©m um n√∫mero do usu√°rio com valida√ß√£o.
        
        Args:
            mensagem (str): Mensagem para solicitar entrada
            min_valor (float): Valor m√≠nimo aceito
            
        Returns:
            float: N√∫mero v√°lido digitado pelo usu√°rio
        """
        while True:
            try:
                valor = float(input(mensagem))
                if valor <= min_valor:
                    print(f"‚ùå Valor deve ser maior que {min_valor}")
                    continue
                return valor
            except ValueError:
                print("‚ùå Digite um n√∫mero v√°lido")
            except KeyboardInterrupt:
                print("\nüëã Opera√ß√£o cancelada pelo usu√°rio")
                return 0
    
    def obter_inteiro(self, mensagem: str, min_valor: int = 0) -> int:
        """
        Obt√©m um n√∫mero inteiro do usu√°rio com valida√ß√£o.
        
        Args:
            mensagem (str): Mensagem para solicitar entrada
            min_valor (int): Valor m√≠nimo aceito
            
        Returns:
            int: N√∫mero inteiro v√°lido digitado pelo usu√°rio
        """
        while True:
            try:
                valor = int(input(mensagem))
                if valor < min_valor:
                    print(f"‚ùå Valor deve ser maior ou igual a {min_valor}")
                    continue
                return valor
            except ValueError:
                print("‚ùå Digite um n√∫mero inteiro v√°lido")
            except KeyboardInterrupt:
                print("\nüëã Opera√ß√£o cancelada pelo usu√°rio")
                return 0
    
    def obter_texto(self, mensagem: str, obrigatorio: bool = True) -> str:
        """
        Obt√©m texto do usu√°rio com valida√ß√£o.
        
        Args:
            mensagem (str): Mensagem para solicitar entrada
            obrigatorio (bool): Se o campo √© obrigat√≥rio
            
        Returns:
            str: Texto digitado pelo usu√°rio
        """
        while True:
            try:
                texto = input(mensagem).strip()
                if obrigatorio and not texto:
                    print("‚ùå Este campo √© obrigat√≥rio")
                    continue
                return texto
            except KeyboardInterrupt:
                print("\nüëã Opera√ß√£o cancelada pelo usu√°rio")
                return ""
    
    def menu_principal(self):
        """Exibe o menu principal do sistema."""
        while True:
            self.exibir_cabecalho("MENU PRINCIPAL")
            
            print("1Ô∏è‚É£  Acessar Conta Existente")
            print("2Ô∏è‚É£  Criar Nova Conta")
            print("3Ô∏è‚É£  Listar Todas as Contas")
            print("4Ô∏è‚É£  Estat√≠sticas do Sistema")
            print("0Ô∏è‚É£  Sair do Sistema")
            
            opcao = input("\nüéØ Escolha uma op√ß√£o: ").strip()
            
            if opcao == "1":
                self.acessar_conta()
            elif opcao == "2":
                self.criar_conta()
            elif opcao == "3":
                self.listar_contas()
            elif opcao == "4":
                self.exibir_estatisticas()
            elif opcao == "0":
                print("\nüëã Obrigado por usar o Banco Digital Python!")
                sys.exit(0)
            else:
                print("‚ùå Op√ß√£o inv√°lida!")
                self.pausar()
    
    def acessar_conta(self):
        """Acessa uma conta existente."""
        self.exibir_cabecalho("ACESSAR CONTA")
        
        numero_conta = self.obter_inteiro("üîë Digite o n√∫mero da conta: ", 1000)
        if numero_conta == 0:
            return
        
        try:
            self.conta_atual = self.sistema.autenticar_conta(numero_conta)
            print(f"\n‚úÖ Bem-vindo(a), {self.conta_atual.titular}!")
            self.pausar()
            self.menu_conta()
        except ValueError as e:
            print(f"\n‚ùå {e}")
            self.pausar()
    
    def criar_conta(self):
        """Cria uma nova conta."""
        self.exibir_cabecalho("CRIAR NOVA CONTA")
        
        titular = self.obter_texto("üë§ Nome completo do titular: ")
        if not titular:
            return
        
        cpf_cnpj = self.obter_texto("üìÑ CPF ou CNPJ: ")
        if not cpf_cnpj:
            return
        
        try:
            nova_conta = self.sistema.criar_conta(titular, cpf_cnpj)
            print(f"\n‚úÖ Conta criada com sucesso!")
            print(f"üìä N√∫mero da conta: {nova_conta.numero_conta}")
            print(f"üë§ Titular: {nova_conta.titular}")
            print(f"üí∞ Saldo inicial: R$ {nova_conta.saldo:.2f}")
        except ValueError as e:
            print(f"\n‚ùå {e}")
        
        self.pausar()
    
    def menu_conta(self):
        """Menu de opera√ß√µes da conta logada."""
        while True:
            self.exibir_cabecalho(f"CONTA: {self.conta_atual.numero_conta} - {self.conta_atual.titular}")
            print(f"üí∞ Saldo atual: R$ {self.conta_atual.saldo:.2f}")
            print()
            
            print("1Ô∏è‚É£  Depositar")
            print("2Ô∏è‚É£  Sacar")
            print("3Ô∏è‚É£  Consultar Saldo")
            print("4Ô∏è‚É£  Visualizar Extrato")
            print("5Ô∏è‚É£  Transferir Dinheiro")
            print("6Ô∏è‚É£  Pagar Conta")
            print("7Ô∏è‚É£  Resumo da Conta")
            print("0Ô∏è‚É£  Voltar ao Menu Principal")
            
            opcao = input("\nüéØ Escolha uma op√ß√£o: ").strip()
            
            if opcao == "1":
                self.depositar()
            elif opcao == "2":
                self.sacar()
            elif opcao == "3":
                self.consultar_saldo()
            elif opcao == "4":
                self.visualizar_extrato()
            elif opcao == "5":
                self.transferir()
            elif opcao == "6":
                self.pagar_conta()
            elif opcao == "7":
                self.resumo_conta()
            elif opcao == "0":
                self.conta_atual = None
                break
            else:
                print("‚ùå Op√ß√£o inv√°lida!")
                self.pausar()
    
    def depositar(self):
        """Realiza dep√≥sito na conta."""
        self.exibir_cabecalho("DEP√ìSITO")
        
        valor = self.obter_numero("üíµ Valor do dep√≥sito: R$ ")
        if valor == 0:
            return
        
        descricao = self.obter_texto("üìù Descri√ß√£o (opcional): ", False)
        if not descricao:
            descricao = "Dep√≥sito"
        
        try:
            self.conta_atual.depositar(valor, descricao)
            print(f"\n‚úÖ Dep√≥sito realizado com sucesso!")
            print(f"üí∞ Novo saldo: R$ {self.conta_atual.saldo:.2f}")
        except ValueError as e:
            print(f"\n‚ùå {e}")
        
        self.pausar()
    
    def sacar(self):
        """Realiza saque da conta."""
        self.exibir_cabecalho("SAQUE")
        print(f"üí∞ Saldo dispon√≠vel: R$ {self.conta_atual.saldo:.2f}")
        
        valor = self.obter_numero("üí∏ Valor do saque: R$ ")
        if valor == 0:
            return
        
        descricao = self.obter_texto("üìù Descri√ß√£o (opcional): ", False)
        if not descricao:
            descricao = "Saque"
        
        try:
            self.conta_atual.sacar(valor, descricao)
            print(f"\n‚úÖ Saque realizado com sucesso!")
            print(f"üí∞ Novo saldo: R$ {self.conta_atual.saldo:.2f}")
        except (ValueError, RuntimeError) as e:
            print(f"\n‚ùå {e}")
        
        self.pausar()
    
    def consultar_saldo(self):
        """Consulta o saldo da conta."""
        self.exibir_cabecalho("CONSULTA DE SALDO")
        
        print(f"üë§ Titular: {self.conta_atual.titular}")
        print(f"üî¢ Conta: {self.conta_atual.numero_conta}")
        print(f"üí∞ Saldo atual: R$ {self.conta_atual.saldo:.2f}")
        
        self.pausar()
    
    def visualizar_extrato(self):
        """Visualiza o extrato da conta."""
        self.exibir_cabecalho("EXTRATO BANC√ÅRIO")
        
        extrato = self.conta_atual.obter_extrato()
        
        if not extrato:
            print("üì≠ Nenhuma movimenta√ß√£o encontrada.")
        else:
            print(f"üë§ Titular: {self.conta_atual.titular}")
            print(f"üî¢ Conta: {self.conta_atual.numero_conta}")
            print()
            
            for transacao in extrato[:10]:  # Mostra √∫ltimas 10 transa√ß√µes
                data_hora = transacao['data_hora'].strftime("%d/%m/%Y %H:%M:%S")
                tipo = transacao['tipo']
                valor = transacao['valor']
                descricao = transacao['descricao']
                saldo_apos = transacao['saldo_apos']
                
                # Formata√ß√£o colorida baseada no tipo
                if valor > 0:
                    valor_str = f"+R$ {valor:.2f} ‚úÖ"
                elif valor < 0:
                    valor_str = f"R$ {valor:.2f} ‚ùå"
                else:
                    valor_str = f"R$ {valor:.2f} ‚ÑπÔ∏è"
                
                print(f"üìÖ {data_hora}")
                print(f"üìù {tipo}: {descricao}")
                print(f"üíµ {valor_str}")
                print(f"üí∞ Saldo ap√≥s: R$ {saldo_apos:.2f}")
                print("-" * 40)
            
            if len(extrato) > 10:
                print(f"... e mais {len(extrato) - 10} transa√ß√µes")
        
        self.pausar()
    
    def transferir(self):
        """Realiza transfer√™ncia para outra conta."""
        self.exibir_cabecalho("TRANSFER√äNCIA")
        print(f"üí∞ Saldo dispon√≠vel: R$ {self.conta_atual.saldo:.2f}")
        
        numero_destino = self.obter_inteiro("üéØ N√∫mero da conta destino: ", 1000)
        if numero_destino == 0:
            return
        
        # Verifica se a conta destino existe
        try:
            conta_destino = self.sistema.autenticar_conta(numero_destino)
            print(f"‚úÖ Conta destino encontrada: {conta_destino.titular}")
        except ValueError as e:
            print(f"\n‚ùå {e}")
            self.pausar()
            return
        
        valor = self.obter_numero("üíµ Valor da transfer√™ncia: R$ ")
        if valor == 0:
            return
        
        descricao = self.obter_texto("üìù Descri√ß√£o (opcional): ", False)
        if not descricao:
            descricao = "Transfer√™ncia"
        
        try:
            self.conta_atual.transferir(conta_destino, valor, descricao)
            print(f"\n‚úÖ Transfer√™ncia realizada com sucesso!")
            print(f"üí∞ Novo saldo: R$ {self.conta_atual.saldo:.2f}")
        except (ValueError, RuntimeError) as e:
            print(f"\n‚ùå {e}")
        
        self.pausar()
    
    def pagar_conta(self):
        """Realiza pagamento de conta."""
        self.exibir_cabecalho("PAGAMENTO DE CONTA")
        print(f"üí∞ Saldo dispon√≠vel: R$ {self.conta_atual.saldo:.2f}")
        
        descricao = self.obter_texto("üìù Descri√ß√£o do pagamento: ")
        if not descricao:
            return
        
        valor = self.obter_numero("üí∏ Valor do pagamento: R$ ")
        if valor == 0:
            return
        
        try:
            self.conta_atual.pagar_conta(valor, descricao)
            print(f"\n‚úÖ Pagamento realizado com sucesso!")
            print(f"üí∞ Novo saldo: R$ {self.conta_atual.saldo:.2f}")
        except (ValueError, RuntimeError) as e:
            print(f"\n‚ùå {e}")
        
        self.pausar()
    
    def resumo_conta(self):
        """Exibe resumo completo da conta."""
        self.exibir_cabecalho("RESUMO DA CONTA")
        
        resumo = self.conta_atual.resumo()
        
        print(f"üî¢ N√∫mero da Conta: {resumo['numero_conta']}")
        print(f"üë§ Titular: {resumo['titular']}")
        print(f"üìÑ CPF/CNPJ: {resumo['cpf_cnpj']}")
        print(f"üí∞ Saldo Atual: R$ {resumo['saldo']:.2f}")
        print(f"üìÖ Data de Cria√ß√£o: {resumo['data_criacao'].strftime('%d/%m/%Y %H:%M:%S')}")
        print(f"üìä Total de Transa√ß√µes: {resumo['total_transacoes']}")
        
        self.pausar()
    
    def listar_contas(self):
        """Lista todas as contas do sistema."""
        self.exibir_cabecalho("TODAS AS CONTAS")
        
        contas = self.sistema.listar_contas()
        
        if not contas:
            print("üì≠ Nenhuma conta cadastrada no sistema.")
        else:
            print(f"üìä Total de contas: {len(contas)}")
            print()
            
            for conta in contas:
                print(f"üî¢ Conta: {conta['numero']}")
                print(f"üë§ Titular: {conta['titular']}")
                print(f"üí∞ Saldo: R$ {conta['saldo']:.2f}")
                print(f"üìÖ Criada em: {conta['data_criacao']}")
                print("-" * 40)
        
        self.pausar()
    
    def exibir_estatisticas(self):
        """Exibe estat√≠sticas do sistema."""
        self.exibir_cabecalho("ESTAT√çSTICAS DO SISTEMA")
        
        stats = self.sistema.obter_estatisticas()
        
        if stats['total_contas'] == 0:
            print("üì≠ Nenhuma conta cadastrada no sistema.")
        else:
            print(f"üìä Total de Contas: {stats['total_contas']}")
            print(f"üí∞ Saldo Total do Sistema: R$ {stats['saldo_total']:.2f}")
            print(f"üìà Saldo M√©dio: R$ {stats['saldo_medio']:.2f}")
            print()
            
            maior = stats['conta_maior_saldo']
            print(f"üèÜ Maior Saldo:")
            print(f"   üî¢ Conta: {maior['numero']}")
            print(f"   üë§ Titular: {maior['titular']}")
            print(f"   üí∞ Saldo: R$ {maior['saldo']:.2f}")
            print()
            
            menor = stats['conta_menor_saldo']
            print(f"üìâ Menor Saldo:")
            print(f"   üî¢ Conta: {menor['numero']}")
            print(f"   üë§ Titular: {menor['titular']}")
            print(f"   üí∞ Saldo: R$ {menor['saldo']:.2f}")
        
        self.pausar()
    
    def executar(self):
        """Inicia a execu√ß√£o da interface."""
        try:
            print("üöÄ Inicializando Sistema Banc√°rio...")
            self.menu_principal()
        except KeyboardInterrupt:
            print("\n\nüëã Sistema encerrado pelo usu√°rio. At√© logo!")
        except Exception as e:
            print(f"\nüí• Erro inesperado: {e}")
            print("üîß Entre em contato com o suporte t√©cnico.")


def main():
    """Fun√ß√£o principal para executar a aplica√ß√£o."""
    interface = InterfaceBancaria()
    interface.executar()


if __name__ == "__main__":
    main()